import { Repository } from 'typeorm';
import { MedicalRecord } from './entities/medical-record.entity';
import { Triage } from './entities/triage.entity';
import { MedicalHistoryBase } from './entities/medical-history-base.entity';
import { SpecialtyMedicalHistory } from './entities/specialty-medical-history.entity';
import { Patient } from '../patients/entities/patient.entity';
import { Professional } from '../professionals/entities/professional.entity';
import { Specialty } from '../specialties/entities/specialty.entity';
import { CreateMedicalRecordDto } from './dto/create-medical-record.dto';
import { UpdateMedicalRecordDto } from './dto/update-medical-record.dto';
import { MedicalRecordResponseDto } from './dto/medical-record-response.dto';
import { CreateMedicalHistoryBaseDto } from './dto/create-medical-history-base.dto';
import { UpdateMedicalHistoryBaseDto } from './dto/update-medical-history-base.dto';
import { CreateSpecialtyMedicalHistoryDto } from './dto/create-specialty-medical-history.dto';
import { UpdateSpecialtyMedicalHistoryDto } from './dto/update-specialty-medical-history.dto';
import { MedicalHistoryBaseResponseDto, SpecialtyMedicalHistoryResponseDto } from './dto/medical-history-response.dto';
export declare class MedicalRecordsService {
    private readonly medicalRecordRepository;
    private readonly triageRepository;
    private readonly medicalHistoryBaseRepository;
    private readonly specialtyMedicalHistoryRepository;
    private readonly patientRepository;
    private readonly professionalRepository;
    private readonly specialtyRepository;
    private readonly logger;
    constructor(medicalRecordRepository: Repository<MedicalRecord>, triageRepository: Repository<Triage>, medicalHistoryBaseRepository: Repository<MedicalHistoryBase>, specialtyMedicalHistoryRepository: Repository<SpecialtyMedicalHistory>, patientRepository: Repository<Patient>, professionalRepository: Repository<Professional>, specialtyRepository: Repository<Specialty>);
    create(createMedicalRecordDto: CreateMedicalRecordDto): Promise<MedicalRecordResponseDto>;
    findAll(includeInactive?: boolean): Promise<MedicalRecordResponseDto[]>;
    findOne(id: string): Promise<MedicalRecordResponseDto>;
    findByRecordNumber(recordNumber: string): Promise<MedicalRecordResponseDto>;
    findByPatientDni(dni: string): Promise<MedicalRecordResponseDto[]>;
    findBySpecialty(specialtyId: string): Promise<MedicalRecordResponseDto[]>;
    findByProfessional(professionalId: string): Promise<MedicalRecordResponseDto[]>;
    update(id: string, updateMedicalRecordDto: UpdateMedicalRecordDto): Promise<MedicalRecordResponseDto>;
    deactivate(id: string): Promise<MedicalRecordResponseDto>;
    private generateRecordNumber;
    private hasTriageData;
    updateTriage(id: string, triageData: any): Promise<MedicalRecordResponseDto>;
    getStats(): Promise<any>;
    createMedicalHistoryBase(medicalRecordId: string, createMedicalHistoryBaseDto: CreateMedicalHistoryBaseDto): Promise<MedicalHistoryBaseResponseDto>;
    getMedicalHistoryBase(medicalRecordId: string): Promise<MedicalHistoryBaseResponseDto>;
    updateMedicalHistoryBase(medicalRecordId: string, updateMedicalHistoryBaseDto: UpdateMedicalHistoryBaseDto): Promise<MedicalHistoryBaseResponseDto>;
    createSpecialtyMedicalHistory(medicalRecordId: string, createSpecialtyMedicalHistoryDto: CreateSpecialtyMedicalHistoryDto): Promise<SpecialtyMedicalHistoryResponseDto>;
    getSpecialtyMedicalHistory(medicalRecordId: string): Promise<SpecialtyMedicalHistoryResponseDto>;
    updateSpecialtyMedicalHistory(medicalRecordId: string, updateSpecialtyMedicalHistoryDto: UpdateSpecialtyMedicalHistoryDto): Promise<SpecialtyMedicalHistoryResponseDto>;
    getCompletionStatus(medicalRecordId: string): Promise<{
        hasTriage: boolean;
        hasMedicalHistoryBase: boolean;
        hasSpecialtyHistory: boolean;
        canFinalize: boolean;
        missingSteps: string[];
    }>;
    finalizeRecord(medicalRecordId: string): Promise<MedicalRecordResponseDto>;
}
